/*
 * This file is generated by jOOQ.
 */
package com.senacor.academy.objpa.jooq.tables;


import com.senacor.academy.objpa.jooq.DefaultSchema;
import com.senacor.academy.objpa.jooq.Keys;
import com.senacor.academy.objpa.jooq.tables.Pizza.PizzaPath;
import com.senacor.academy.objpa.jooq.tables.ShopOrder.ShopOrderPath;
import com.senacor.academy.objpa.jooq.tables.records.ShopOrderItemRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ShopOrderItem extends TableImpl<ShopOrderItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SHOP_ORDER_ITEM</code>
     */
    public static final ShopOrderItem SHOP_ORDER_ITEM = new ShopOrderItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopOrderItemRecord> getRecordType() {
        return ShopOrderItemRecord.class;
    }

    /**
     * The column <code>SHOP_ORDER_ITEM.ID</code>.
     */
    public final TableField<ShopOrderItemRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>SHOP_ORDER_ITEM.SHOP_ORDER_ID</code>.
     */
    public final TableField<ShopOrderItemRecord, Long> SHOP_ORDER_ID = createField(DSL.name("SHOP_ORDER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SHOP_ORDER_ITEM.PIZZA_ID</code>.
     */
    public final TableField<ShopOrderItemRecord, Long> PIZZA_ID = createField(DSL.name("PIZZA_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SHOP_ORDER_ITEM.AMOUNT</code>.
     */
    public final TableField<ShopOrderItemRecord, Integer> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.INTEGER.nullable(false), this, "");

    private ShopOrderItem(Name alias, Table<ShopOrderItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ShopOrderItem(Name alias, Table<ShopOrderItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>SHOP_ORDER_ITEM</code> table reference
     */
    public ShopOrderItem(String alias) {
        this(DSL.name(alias), SHOP_ORDER_ITEM);
    }

    /**
     * Create an aliased <code>SHOP_ORDER_ITEM</code> table reference
     */
    public ShopOrderItem(Name alias) {
        this(alias, SHOP_ORDER_ITEM);
    }

    /**
     * Create a <code>SHOP_ORDER_ITEM</code> table reference
     */
    public ShopOrderItem() {
        this(DSL.name("SHOP_ORDER_ITEM"), null);
    }

    public <O extends Record> ShopOrderItem(Table<O> path, ForeignKey<O, ShopOrderItemRecord> childPath, InverseForeignKey<O, ShopOrderItemRecord> parentPath) {
        super(path, childPath, parentPath, SHOP_ORDER_ITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ShopOrderItemPath extends ShopOrderItem implements Path<ShopOrderItemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ShopOrderItemPath(Table<O> path, ForeignKey<O, ShopOrderItemRecord> childPath, InverseForeignKey<O, ShopOrderItemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ShopOrderItemPath(Name alias, Table<ShopOrderItemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ShopOrderItemPath as(String alias) {
            return new ShopOrderItemPath(DSL.name(alias), this);
        }

        @Override
        public ShopOrderItemPath as(Name alias) {
            return new ShopOrderItemPath(alias, this);
        }

        @Override
        public ShopOrderItemPath as(Table<?> alias) {
            return new ShopOrderItemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ShopOrderItemRecord, Long> getIdentity() {
        return (Identity<ShopOrderItemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShopOrderItemRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public List<UniqueKey<ShopOrderItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_37);
    }

    @Override
    public List<ForeignKey<ShopOrderItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SHOP_ORDER_ITEM_SHOP_ORDER, Keys.FK_SHOP_ORDER_ITEM_PIZZA);
    }

    private transient ShopOrderPath _shopOrder;

    /**
     * Get the implicit join path to the <code>PUBLIC.SHOP_ORDER</code> table.
     */
    public ShopOrderPath shopOrder() {
        if (_shopOrder == null)
            _shopOrder = new ShopOrderPath(this, Keys.FK_SHOP_ORDER_ITEM_SHOP_ORDER, null);

        return _shopOrder;
    }

    private transient PizzaPath _pizza;

    /**
     * Get the implicit join path to the <code>PUBLIC.PIZZA</code> table.
     */
    public PizzaPath pizza() {
        if (_pizza == null)
            _pizza = new PizzaPath(this, Keys.FK_SHOP_ORDER_ITEM_PIZZA, null);

        return _pizza;
    }

    @Override
    public ShopOrderItem as(String alias) {
        return new ShopOrderItem(DSL.name(alias), this);
    }

    @Override
    public ShopOrderItem as(Name alias) {
        return new ShopOrderItem(alias, this);
    }

    @Override
    public ShopOrderItem as(Table<?> alias) {
        return new ShopOrderItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopOrderItem rename(String name) {
        return new ShopOrderItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopOrderItem rename(Name name) {
        return new ShopOrderItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopOrderItem rename(Table<?> name) {
        return new ShopOrderItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrderItem where(Condition condition) {
        return new ShopOrderItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrderItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrderItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrderItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShopOrderItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShopOrderItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShopOrderItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShopOrderItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrderItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrderItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
