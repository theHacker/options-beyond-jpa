/*
 * This file is generated by jOOQ.
 */
package com.senacor.academy.objpa.jooq.tables;


import com.senacor.academy.objpa.jooq.DefaultSchema;
import com.senacor.academy.objpa.jooq.Keys;
import com.senacor.academy.objpa.jooq.tables.Pizza.PizzaPath;
import com.senacor.academy.objpa.jooq.tables.records.PizzaToppingRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PizzaTopping extends TableImpl<PizzaToppingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PIZZA_TOPPING</code>
     */
    public static final PizzaTopping PIZZA_TOPPING = new PizzaTopping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PizzaToppingRecord> getRecordType() {
        return PizzaToppingRecord.class;
    }

    /**
     * The column <code>PIZZA_TOPPING.PIZZA_ID</code>.
     */
    public final TableField<PizzaToppingRecord, Long> PIZZA_ID = createField(DSL.name("PIZZA_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PIZZA_TOPPING.TOPPING</code>.
     */
    public final TableField<PizzaToppingRecord, String> TOPPING = createField(DSL.name("TOPPING"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private PizzaTopping(Name alias, Table<PizzaToppingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PizzaTopping(Name alias, Table<PizzaToppingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PIZZA_TOPPING</code> table reference
     */
    public PizzaTopping(String alias) {
        this(DSL.name(alias), PIZZA_TOPPING);
    }

    /**
     * Create an aliased <code>PIZZA_TOPPING</code> table reference
     */
    public PizzaTopping(Name alias) {
        this(alias, PIZZA_TOPPING);
    }

    /**
     * Create a <code>PIZZA_TOPPING</code> table reference
     */
    public PizzaTopping() {
        this(DSL.name("PIZZA_TOPPING"), null);
    }

    public <O extends Record> PizzaTopping(Table<O> path, ForeignKey<O, PizzaToppingRecord> childPath, InverseForeignKey<O, PizzaToppingRecord> parentPath) {
        super(path, childPath, parentPath, PIZZA_TOPPING);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PizzaToppingPath extends PizzaTopping implements Path<PizzaToppingRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PizzaToppingPath(Table<O> path, ForeignKey<O, PizzaToppingRecord> childPath, InverseForeignKey<O, PizzaToppingRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PizzaToppingPath(Name alias, Table<PizzaToppingRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PizzaToppingPath as(String alias) {
            return new PizzaToppingPath(DSL.name(alias), this);
        }

        @Override
        public PizzaToppingPath as(Name alias) {
            return new PizzaToppingPath(alias, this);
        }

        @Override
        public PizzaToppingPath as(Table<?> alias) {
            return new PizzaToppingPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PizzaToppingRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public List<ForeignKey<PizzaToppingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PIZZA_TOPPING_PIZZA);
    }

    private transient PizzaPath _pizza;

    /**
     * Get the implicit join path to the <code>PUBLIC.PIZZA</code> table.
     */
    public PizzaPath pizza() {
        if (_pizza == null)
            _pizza = new PizzaPath(this, Keys.FK_PIZZA_TOPPING_PIZZA, null);

        return _pizza;
    }

    @Override
    public PizzaTopping as(String alias) {
        return new PizzaTopping(DSL.name(alias), this);
    }

    @Override
    public PizzaTopping as(Name alias) {
        return new PizzaTopping(alias, this);
    }

    @Override
    public PizzaTopping as(Table<?> alias) {
        return new PizzaTopping(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PizzaTopping rename(String name) {
        return new PizzaTopping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PizzaTopping rename(Name name) {
        return new PizzaTopping(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PizzaTopping rename(Table<?> name) {
        return new PizzaTopping(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PizzaTopping where(Condition condition) {
        return new PizzaTopping(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PizzaTopping where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PizzaTopping where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PizzaTopping where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PizzaTopping where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PizzaTopping where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PizzaTopping where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PizzaTopping where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PizzaTopping whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PizzaTopping whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
