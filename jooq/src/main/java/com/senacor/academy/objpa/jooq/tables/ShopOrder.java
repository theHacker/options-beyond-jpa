/*
 * This file is generated by jOOQ.
 */
package com.senacor.academy.objpa.jooq.tables;


import com.senacor.academy.objpa.jooq.DefaultSchema;
import com.senacor.academy.objpa.jooq.Keys;
import com.senacor.academy.objpa.jooq.tables.Customer.CustomerPath;
import com.senacor.academy.objpa.jooq.tables.Pizza.PizzaPath;
import com.senacor.academy.objpa.jooq.tables.ShopOrderItem.ShopOrderItemPath;
import com.senacor.academy.objpa.jooq.tables.records.ShopOrderRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ShopOrder extends TableImpl<ShopOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SHOP_ORDER</code>
     */
    public static final ShopOrder SHOP_ORDER = new ShopOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopOrderRecord> getRecordType() {
        return ShopOrderRecord.class;
    }

    /**
     * The column <code>SHOP_ORDER.ID</code>.
     */
    public final TableField<ShopOrderRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>SHOP_ORDER.CUSTOMER_ID</code>.
     */
    public final TableField<ShopOrderRecord, Long> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SHOP_ORDER.DATE</code>.
     */
    public final TableField<ShopOrderRecord, LocalDate> DATE = createField(DSL.name("DATE"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private ShopOrder(Name alias, Table<ShopOrderRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ShopOrder(Name alias, Table<ShopOrderRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>SHOP_ORDER</code> table reference
     */
    public ShopOrder(String alias) {
        this(DSL.name(alias), SHOP_ORDER);
    }

    /**
     * Create an aliased <code>SHOP_ORDER</code> table reference
     */
    public ShopOrder(Name alias) {
        this(alias, SHOP_ORDER);
    }

    /**
     * Create a <code>SHOP_ORDER</code> table reference
     */
    public ShopOrder() {
        this(DSL.name("SHOP_ORDER"), null);
    }

    public <O extends Record> ShopOrder(Table<O> path, ForeignKey<O, ShopOrderRecord> childPath, InverseForeignKey<O, ShopOrderRecord> parentPath) {
        super(path, childPath, parentPath, SHOP_ORDER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ShopOrderPath extends ShopOrder implements Path<ShopOrderRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ShopOrderPath(Table<O> path, ForeignKey<O, ShopOrderRecord> childPath, InverseForeignKey<O, ShopOrderRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ShopOrderPath(Name alias, Table<ShopOrderRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ShopOrderPath as(String alias) {
            return new ShopOrderPath(DSL.name(alias), this);
        }

        @Override
        public ShopOrderPath as(Name alias) {
            return new ShopOrderPath(alias, this);
        }

        @Override
        public ShopOrderPath as(Table<?> alias) {
            return new ShopOrderPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ShopOrderRecord, Long> getIdentity() {
        return (Identity<ShopOrderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShopOrderRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<ForeignKey<ShopOrderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SHOP_ORDER_CUSTOMER);
    }

    private transient CustomerPath _customer;

    /**
     * Get the implicit join path to the <code>PUBLIC.CUSTOMER</code> table.
     */
    public CustomerPath customer() {
        if (_customer == null)
            _customer = new CustomerPath(this, Keys.FK_SHOP_ORDER_CUSTOMER, null);

        return _customer;
    }

    private transient ShopOrderItemPath _shopOrderItem;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.SHOP_ORDER_ITEM</code> table
     */
    public ShopOrderItemPath shopOrderItem() {
        if (_shopOrderItem == null)
            _shopOrderItem = new ShopOrderItemPath(this, null, Keys.FK_SHOP_ORDER_ITEM_SHOP_ORDER.getInverseKey());

        return _shopOrderItem;
    }

    /**
     * Get the implicit many-to-many join path to the <code>PUBLIC.PIZZA</code>
     * table
     */
    public PizzaPath pizza() {
        return shopOrderItem().pizza();
    }

    @Override
    public ShopOrder as(String alias) {
        return new ShopOrder(DSL.name(alias), this);
    }

    @Override
    public ShopOrder as(Name alias) {
        return new ShopOrder(alias, this);
    }

    @Override
    public ShopOrder as(Table<?> alias) {
        return new ShopOrder(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopOrder rename(String name) {
        return new ShopOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopOrder rename(Name name) {
        return new ShopOrder(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopOrder rename(Table<?> name) {
        return new ShopOrder(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrder where(Condition condition) {
        return new ShopOrder(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrder where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrder where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrder where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShopOrder where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShopOrder where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShopOrder where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShopOrder where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrder whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShopOrder whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
