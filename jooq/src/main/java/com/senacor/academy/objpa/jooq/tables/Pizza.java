/*
 * This file is generated by jOOQ.
 */
package com.senacor.academy.objpa.jooq.tables;


import com.senacor.academy.objpa.jooq.DefaultSchema;
import com.senacor.academy.objpa.jooq.Keys;
import com.senacor.academy.objpa.jooq.tables.PizzaTopping.PizzaToppingPath;
import com.senacor.academy.objpa.jooq.tables.ShopOrder.ShopOrderPath;
import com.senacor.academy.objpa.jooq.tables.ShopOrderItem.ShopOrderItemPath;
import com.senacor.academy.objpa.jooq.tables.records.PizzaRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Pizza extends TableImpl<PizzaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PIZZA</code>
     */
    public static final Pizza PIZZA = new Pizza();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PizzaRecord> getRecordType() {
        return PizzaRecord.class;
    }

    /**
     * The column <code>PIZZA.ID</code>.
     */
    public final TableField<PizzaRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PIZZA.NAME</code>.
     */
    public final TableField<PizzaRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(48).nullable(false), this, "");

    private Pizza(Name alias, Table<PizzaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Pizza(Name alias, Table<PizzaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PIZZA</code> table reference
     */
    public Pizza(String alias) {
        this(DSL.name(alias), PIZZA);
    }

    /**
     * Create an aliased <code>PIZZA</code> table reference
     */
    public Pizza(Name alias) {
        this(alias, PIZZA);
    }

    /**
     * Create a <code>PIZZA</code> table reference
     */
    public Pizza() {
        this(DSL.name("PIZZA"), null);
    }

    public <O extends Record> Pizza(Table<O> path, ForeignKey<O, PizzaRecord> childPath, InverseForeignKey<O, PizzaRecord> parentPath) {
        super(path, childPath, parentPath, PIZZA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PizzaPath extends Pizza implements Path<PizzaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PizzaPath(Table<O> path, ForeignKey<O, PizzaRecord> childPath, InverseForeignKey<O, PizzaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PizzaPath(Name alias, Table<PizzaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PizzaPath as(String alias) {
            return new PizzaPath(DSL.name(alias), this);
        }

        @Override
        public PizzaPath as(Name alias) {
            return new PizzaPath(alias, this);
        }

        @Override
        public PizzaPath as(Table<?> alias) {
            return new PizzaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PizzaRecord, Long> getIdentity() {
        return (Identity<PizzaRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PizzaRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    private transient PizzaToppingPath _pizzaTopping;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.PIZZA_TOPPING</code> table
     */
    public PizzaToppingPath pizzaTopping() {
        if (_pizzaTopping == null)
            _pizzaTopping = new PizzaToppingPath(this, null, Keys.FK_PIZZA_TOPPING_PIZZA.getInverseKey());

        return _pizzaTopping;
    }

    private transient ShopOrderItemPath _shopOrderItem;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.SHOP_ORDER_ITEM</code> table
     */
    public ShopOrderItemPath shopOrderItem() {
        if (_shopOrderItem == null)
            _shopOrderItem = new ShopOrderItemPath(this, null, Keys.FK_SHOP_ORDER_ITEM_PIZZA.getInverseKey());

        return _shopOrderItem;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>PUBLIC.SHOP_ORDER</code> table
     */
    public ShopOrderPath shopOrder() {
        return shopOrderItem().shopOrder();
    }

    @Override
    public Pizza as(String alias) {
        return new Pizza(DSL.name(alias), this);
    }

    @Override
    public Pizza as(Name alias) {
        return new Pizza(alias, this);
    }

    @Override
    public Pizza as(Table<?> alias) {
        return new Pizza(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pizza rename(String name) {
        return new Pizza(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pizza rename(Name name) {
        return new Pizza(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pizza rename(Table<?> name) {
        return new Pizza(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pizza where(Condition condition) {
        return new Pizza(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pizza where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pizza where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pizza where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pizza where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pizza where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pizza where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pizza where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pizza whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pizza whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
